import org.apache.tools.ant.taskdefs.condition.Os

import java.text.SimpleDateFormat

apply plugin: 'com.android.library'
//apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    signingConfigs {
        configs {
            keyAlias APP_KEY_ALIAS
            keyPassword APP_KEY_PASSWORD
            storePassword APP_STORE_PASSWORD

            def userName = System.getProperty("user.name")//根据 os 账户信息动态生成keystore 保存路径
            def keystore_path = Os.isFamily(Os.FAMILY_WINDOWS) ? WINDOWS_RELEASE_STORE_FILE : LINUX_RELEASE_STORE_FILE
            keystore_path = keystore_path.replace("{user_name}", userName)

            storeFile file(keystore_path)
        }
    }

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField("String", "EASEMOB_APP_KEY", HW_EASEMOB_APP_KEY)
        buildConfigField("String", "EASEMOB_TENANT_ID", HW_EASEMOB_TENANT_ID)
        buildConfigField("String", "EASEMOB_CUSTOMER_SERVICE_ID", HW_EASEMOB_CUSTOMER_SERVICE_ID)

        resValue("string", "umeng_app_key", HW_UMENG_APP_KEY)
        buildConfigField("String", "UMENG_APP_KEY", HW_UMENG_APP_KEY)
        buildConfigField("String", "UMENG_CHANNEL", HW_UMENG_CHANNEL)
        buildConfigField("String", "UMENG_PUSH_SECRET", HW_UMENG_PUSH_SECRET)

        // dev
        buildConfigField("String", "BASE_URL", HW_DEV_URL)
        buildConfigField("String", "LEANCLOUD_APP_ID", HW_DEV_LEANCLOUD_APP_ID)
        buildConfigField("String", "LEANCLOUD_APP_KEY", HW_DEV_LEANCLOUD_APP_KEY)
        buildConfigField("String", "LEANCLOUD_ONLINE_SERVICE_ID", HW_LEANCLOUD_ONLINE_SERVICE_ID)
        buildConfigField("String", "LEANCLOUD_DOCTOR_SERVICE_ID", HW_LEANCLOUD_DOCTOR_SERVICE_ID)
        buildConfigField("String", "LEANCLOUD_BROADCAST_CONVERSATION_ID", HW_DEV_LEANCLOUD_BROADCAST_CONVERSATION_ID)
        buildConfigField("String", "DEFAULT_APK_DOWNLOAD_URL", HW_DEFAULT_APK_DOWNLOAD_URL)
        buildConfigField("String", "USER_AGREEMENT_URL", HW_USER_AGREEMENT_URL)
        buildConfigField("String", "PRIVACY_POLICY_URL", HW_PRIVACY_POLICY_URL)
        buildConfigField("String", "QUESTION_URL", HW_DEV_QUESTION_URL)
        buildConfigField("String", "USER_GUIDELINE_URL", HW_USER_GUIDELINE_URL)
        buildConfigField("String", "DEFAULT_APK_DOWNLOAD_URL", HW_DEFAULT_APK_DOWNLOAD_URL)

        buildConfigField("String", "WECHAT_APP_ID", HW_OFFICIAL_WECHAT_APP_ID)
        buildConfigField("String", "WECHAT_APP_SECRET", HW_OFFICIAL_WECHAT_APP_SECRET)
        //todo flavor 动态改变取值
        buildConfigField("boolean", "IS_CLINICAL_VERSION", "false")
        //

        // Enabling multidex support.
        multiDexEnabled true

        ndk {
            //设置支持的SO库架构
            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a'
        }
    }

    testOptions {
        execution 'ANDROID_TEST_ORCHESTRATOR'
    }

    buildTypes {
        release {
            debuggable false
            jniDebuggable false
            signingConfig signingConfigs.configs
            minifyEnabled rootProject.ext.minifyEnabled
            pseudoLocalesEnabled rootProject.ext.pseudoLocalesEnabled
            zipAlignEnabled rootProject.ext.zipAlignEnabled
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            applicationIdSuffix rootProject.ext.applicationIdSuffix
            versionNameSuffix rootProject.ext.versionNameSuffix
        }

        debug {
            debuggable true
            jniDebuggable true
            signingConfig signingConfigs.configs
            minifyEnabled rootProject.ext.minifyEnabled
            pseudoLocalesEnabled rootProject.ext.pseudoLocalesEnabled
            zipAlignEnabled rootProject.ext.zipAlignEnabled
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            applicationIdSuffix rootProject.ext.applicationIdSuffix
            versionNameSuffix rootProject.ext.versionNameSuffix
        }

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError rootProject.ext.abortOnError
    }

    //product flavors
//    flavorDimensions "market", "environment"
//
//    productFlavors {
//
//        def app_name = "速眠"
//        def clinical_app_name = "速眠临床版"
//        def application_id = rootProject.ext.applicationId
//        def version_name = rootProject.ext.versionName
//
//        yingyongbao {
//            dimension "market"
//        }
//
//        normalDevolop {
//            dimension "environment"
//
//            def real_app_name = "${app_name}-Dev"
//
//            applicationId = application_id
//            applicationIdSuffix = null
//            versionName = version_name
//            versionNameSuffix = "-dev"
//
//            buildConfigField("boolean", "IS_CLINICAL_VERSION", "false")
//
//            buildConfigField("String", "BASE_URL", HW_DEV_URL)
//            buildConfigField("String", "LEANCLOUD_APP_ID", HW_DEV_LEANCLOUD_APP_ID)
//            buildConfigField("String", "LEANCLOUD_APP_KEY", HW_DEV_LEANCLOUD_APP_KEY)
//            buildConfigField("String", "LEANCLOUD_ONLINE_SERVICE_ID", HW_LEANCLOUD_ONLINE_SERVICE_ID)
//            buildConfigField("String", "LEANCLOUD_DOCTOR_SERVICE_ID", HW_LEANCLOUD_DOCTOR_SERVICE_ID)
//            buildConfigField("String", "LEANCLOUD_BROADCAST_CONVERSATION_ID", HW_DEV_LEANCLOUD_BROADCAST_CONVERSATION_ID)
//            buildConfigField("String", "DEFAULT_APK_DOWNLOAD_URL", HW_DEFAULT_APK_DOWNLOAD_URL)
//            buildConfigField("String", "USER_AGREEMENT_URL", HW_USER_AGREEMENT_URL)
//            buildConfigField("String", "PRIVACY_POLICY_URL", HW_PRIVACY_POLICY_URL)
//            buildConfigField("String", "QUESTION_URL", HW_DEV_QUESTION_URL)
//            buildConfigField("String", "USER_GUIDELINE_URL", HW_USER_GUIDELINE_URL)
//            buildConfigField("String", "DEFAULT_APK_DOWNLOAD_URL", HW_DEFAULT_APK_DOWNLOAD_URL)
//
//            buildConfigField("String", "WECHAT_APP_ID", HW_OFFICIAL_WECHAT_APP_ID)
//            buildConfigField("String", "WECHAT_APP_SECRET", HW_OFFICIAL_WECHAT_APP_SECRET)
//
//            resValue "string", "app_name", real_app_name
//        }
//
//        normalAlpha {
//            dimension "environment"
//
//            def real_app_name = "${app_name}-Test"
//
//            applicationId = application_id
//            applicationIdSuffix = null
//            versionName = version_name
//            versionNameSuffix = "-test"
//
//            buildConfigField("boolean", "IS_CLINICAL_VERSION", "false")
//
//            buildConfigField("String", "BASE_URL", HW_TEST_URL)
//            buildConfigField("String", "LEANCLOUD_APP_ID", HW_TEST_LEANCLOUD_APP_ID)
//            buildConfigField("String", "LEANCLOUD_APP_KEY", HW_TEST_LEANCLOUD_APP_KEY)
//            buildConfigField("String", "LEANCLOUD_ONLINE_SERVICE_ID", HW_LEANCLOUD_ONLINE_SERVICE_ID)
//            buildConfigField("String", "LEANCLOUD_DOCTOR_SERVICE_ID", HW_LEANCLOUD_DOCTOR_SERVICE_ID)
//            buildConfigField("String", "LEANCLOUD_BROADCAST_CONVERSATION_ID", HW_TEST_LEANCLOUD_BROADCAST_CONVERSATION_ID)
//            buildConfigField("String", "USER_AGREEMENT_URL", HW_USER_AGREEMENT_URL)
//            buildConfigField("String", "PRIVACY_POLICY_URL", HW_PRIVACY_POLICY_URL)
//            buildConfigField("String", "QUESTION_URL", HW_TEST_QUESTION_URL)
//            buildConfigField("String", "USER_GUIDELINE_URL", HW_USER_GUIDELINE_URL)
//            buildConfigField("String", "DEFAULT_APK_DOWNLOAD_URL", HW_DEFAULT_APK_DOWNLOAD_URL)
//
//            buildConfigField("String", "WECHAT_APP_ID", HW_OFFICIAL_WECHAT_APP_ID)
//            buildConfigField("String", "WECHAT_APP_SECRET", HW_OFFICIAL_WECHAT_APP_SECRET)
//
//            resValue "string", "app_name", real_app_name
//            println("${real_app_name}")
//        }
//
//        official {
//            dimension "environment"
//
//            applicationId = application_id
//            applicationIdSuffix = null
//            versionName = version_name
//            versionNameSuffix = null
//
//            buildConfigField("boolean", "IS_CLINICAL_VERSION", "false")
//
//            buildConfigField("String", "BASE_URL", HW_OFFICIAL_URL)
//            buildConfigField("String", "LEANCLOUD_APP_ID", HW_OFFICIAL_LEANCLOUD_APP_ID)
//            buildConfigField("String", "LEANCLOUD_APP_KEY", HW_OFFICIAL_LEANCLOUD_APP_KEY)
//            buildConfigField("String", "LEANCLOUD_ONLINE_SERVICE_ID", HW_LEANCLOUD_ONLINE_SERVICE_ID)
//            buildConfigField("String", "LEANCLOUD_DOCTOR_SERVICE_ID", HW_LEANCLOUD_DOCTOR_SERVICE_ID)
//            buildConfigField("String", "LEANCLOUD_BROADCAST_CONVERSATION_ID", HW_OFFICIAL_LEANCLOUD_BROADCAST_CONVERSATION_ID)
//            buildConfigField("String", "USER_AGREEMENT_URL", HW_USER_AGREEMENT_URL)
//            buildConfigField("String", "PRIVACY_POLICY_URL", HW_PRIVACY_POLICY_URL)
//            buildConfigField("String", "QUESTION_URL", HW_OFFICIAL_QUESTION_URL)
//            buildConfigField("String", "USER_GUIDELINE_URL", HW_USER_GUIDELINE_URL)
//            buildConfigField("String", "DEFAULT_APK_DOWNLOAD_URL", HW_DEFAULT_APK_DOWNLOAD_URL)
//
//            buildConfigField("String", "WECHAT_APP_ID", HW_OFFICIAL_WECHAT_APP_ID)
//            buildConfigField("String", "WECHAT_APP_SECRET", HW_OFFICIAL_WECHAT_APP_SECRET)
//
//            resValue "string", "app_name", app_name
//        }
//
//        clinicalDevolop {
//            dimension "environment"
//
//            def real_app_name = "${clinical_app_name}-Dev"
//
//            applicationId = application_id
//            applicationIdSuffix = null
//            versionName = version_name
//            versionNameSuffix = "-dev"
//
//            buildConfigField("boolean", "IS_CLINICAL_VERSION", "true")
//
//            buildConfigField("String", "BASE_URL", HW_DEV_URL)
//            buildConfigField("String", "LEANCLOUD_APP_ID", HW_DEV_LEANCLOUD_APP_ID)
//            buildConfigField("String", "LEANCLOUD_APP_KEY", HW_DEV_LEANCLOUD_APP_KEY)
//            buildConfigField("String", "LEANCLOUD_ONLINE_SERVICE_ID", HW_LEANCLOUD_ONLINE_SERVICE_ID)
//            buildConfigField("String", "LEANCLOUD_DOCTOR_SERVICE_ID", HW_LEANCLOUD_DOCTOR_SERVICE_ID)
//            buildConfigField("String", "LEANCLOUD_BROADCAST_CONVERSATION_ID", HW_DEV_LEANCLOUD_BROADCAST_CONVERSATION_ID)
//            buildConfigField("String", "DEFAULT_APK_DOWNLOAD_URL", HW_DEFAULT_APK_DOWNLOAD_URL)
//            buildConfigField("String", "USER_AGREEMENT_URL", HW_USER_AGREEMENT_URL)
//            buildConfigField("String", "PRIVACY_POLICY_URL", HW_PRIVACY_POLICY_URL)
//            buildConfigField("String", "QUESTION_URL", HW_DEV_QUESTION_URL)
//            buildConfigField("String", "USER_GUIDELINE_URL", HW_USER_GUIDELINE_URL)
//            buildConfigField("String", "DEFAULT_APK_DOWNLOAD_URL", HW_DEFAULT_APK_DOWNLOAD_URL)
//
//            buildConfigField("String", "WECHAT_APP_ID", HW_OFFICIAL_WECHAT_APP_ID)
//            buildConfigField("String", "WECHAT_APP_SECRET", HW_OFFICIAL_WECHAT_APP_SECRET)
//
//            resValue "string", "app_name", real_app_name
//        }
//
//        clinicalAlpha {
//            dimension "environment"
//
//            def real_app_name = "${clinical_app_name}-Test"
//
//            applicationId = application_id
//            applicationIdSuffix = null
//            versionName = version_name
//            versionNameSuffix = "-test"
//
//            buildConfigField("boolean", "IS_CLINICAL_VERSION", "true")
//
//            buildConfigField("String", "BASE_URL", HW_TEST_URL)
//            buildConfigField("String", "LEANCLOUD_APP_ID", HW_TEST_LEANCLOUD_APP_ID)
//            buildConfigField("String", "LEANCLOUD_APP_KEY", HW_TEST_LEANCLOUD_APP_KEY)
//            buildConfigField("String", "LEANCLOUD_ONLINE_SERVICE_ID", HW_LEANCLOUD_ONLINE_SERVICE_ID)
//            buildConfigField("String", "LEANCLOUD_DOCTOR_SERVICE_ID", HW_LEANCLOUD_DOCTOR_SERVICE_ID)
//            buildConfigField("String", "LEANCLOUD_BROADCAST_CONVERSATION_ID", HW_TEST_LEANCLOUD_BROADCAST_CONVERSATION_ID)
//            buildConfigField("String", "USER_AGREEMENT_URL", HW_USER_AGREEMENT_URL)
//            buildConfigField("String", "PRIVACY_POLICY_URL", HW_PRIVACY_POLICY_URL)
//            buildConfigField("String", "QUESTION_URL", HW_TEST_QUESTION_URL)
//            buildConfigField("String", "USER_GUIDELINE_URL", HW_USER_GUIDELINE_URL)
//            buildConfigField("String", "DEFAULT_APK_DOWNLOAD_URL", HW_DEFAULT_APK_DOWNLOAD_URL)
//
//            buildConfigField("String", "WECHAT_APP_ID", HW_OFFICIAL_WECHAT_APP_ID)
//            buildConfigField("String", "WECHAT_APP_SECRET", HW_OFFICIAL_WECHAT_APP_SECRET)
//
//            resValue "string", "app_name", real_app_name
//            println("${real_app_name}")
//        }
//
//        clinical {
//            dimension "environment"
//
//            def real_app_name = "速眠临床版"
//
//            applicationId = application_id
//            applicationIdSuffix = "clinical"
//            versionName = version_name
//            versionNameSuffix = null
//
//            buildConfigField("boolean", "IS_CLINICAL_VERSION", "true")
//
//            buildConfigField("String", "BASE_URL", HW_OFFICIAL_CLINICAL_URL)
//            buildConfigField("String", "LEANCLOUD_APP_ID", HW_OFFICIAL_LEANCLOUD_APP_ID)
//            buildConfigField("String", "LEANCLOUD_APP_KEY", HW_OFFICIAL_LEANCLOUD_APP_KEY)
//            buildConfigField("String", "LEANCLOUD_ONLINE_SERVICE_ID", HW_LEANCLOUD_ONLINE_SERVICE_ID)
//            buildConfigField("String", "LEANCLOUD_DOCTOR_SERVICE_ID", HW_LEANCLOUD_DOCTOR_SERVICE_ID)
//            buildConfigField("String", "LEANCLOUD_BROADCAST_CONVERSATION_ID", HW_OFFICIAL_LEANCLOUD_BROADCAST_CONVERSATION_ID)
//            buildConfigField("String", "USER_AGREEMENT_URL", HW_USER_AGREEMENT_URL)
//            buildConfigField("String", "PRIVACY_POLICY_URL", HW_PRIVACY_POLICY_URL)
//            buildConfigField("String", "QUESTION_URL", HW_CLINIC_OFFICIAL_QUESTION_URL)
//            buildConfigField("String", "USER_GUIDELINE_URL", HW_USER_GUIDELINE_URL)
//            buildConfigField("String", "DEFAULT_APK_DOWNLOAD_URL", HW_DEFAULT_CLINICAL_APK_DOWNLOAD_URL)
//
//            buildConfigField("String", "WECHAT_APP_ID", HW_OFFICIAL_CLINICAL_WECHAT_APP_ID)
//            buildConfigField("String", "WECHAT_APP_SECRET", HW_OFFICIAL_CLINICAL_WECHAT_APP_SECRET)
//
//            resValue "string", "app_name", real_app_name
//        }
//
//        productFlavors.all { flavor ->
//            flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
//        }
//
//    }

    // If you use each() to iterate through the variant objects,
    // you need to start using all(). That's because each() iterates
    // through only the objects that already exist during configuration time—
    // but those object don't exist at configuration time with the new model.
    // However, all() adapts to the new model by picking up object as they are
    // added during execution.

    // rename the apk with the version name
//    applicationVariants.all { variant ->
//        variant.outputs.all { output ->
//            //输出 apk 文件名
//            def fileName = "Sumian_${variant.flavorName}_${formatDate()}.apk"
//
//            println fileName
//
//            //新方式
//            outputFileName = fileName
//
//            //该方式已被废除
//            //output.outputFile = new File(output.outputFile.parent, fileName)
//        }
//    }
}

static def formatDate() {
    def sdf = new SimpleDateFormat("yyyyMMddHHmmss")
    def formatDate = sdf.format(new Date())
    return formatDate
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestUtil 'com.android.support.test:orchestrator:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'
    androidTestImplementation('com.android.support.test.espresso:espresso-core:3.0.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    // kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    implementation project(':blue')
    implementation project(':open')
    implementation project(':common')
    implementation project(':kefu-easeui')

    implementation 'com.android.support:support-v4:' + rootProject.ext.supportVersion
    implementation 'com.android.support:design:' + rootProject.ext.supportVersion
    implementation 'com.android.support:cardview-v7:' + rootProject.ext.supportVersion
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.10.0'
    implementation 'org.ligboy.retrofit2:converter-fastjson-android:2.1.0'
    implementation 'de.hdodenhof:circleimageview:2.1.0'
    //dfu
    implementation 'no.nordicsemi.android:dfu:1.6.1'
    // LeanCloud 基础包
    implementation 'cn.leancloud.android:avoscloud-sdk:v4.6.5'
    // 推送与实时聊天需要的包
    implementation('cn.leancloud.android:avoscloud-push:v4.6.5@aar') { transitive = true }
    //aliyun oss
    implementation 'com.aliyun.dpa:oss-android-sdk:2.8.0'
    implementation 'cn.carbswang.android:NumberPickerView:1.1.1'
    //fastjson
    implementation 'com.alibaba:fastjson:1.2.47'
    //qmui
    implementation 'com.qmuiteam:qmui:1.1.0'
    implementation 'com.github.lsjwzh.RecyclerViewPager:lib:v1.1.2@aar'
    //implementation 'net.qiujuer.genius:ui:2.0.0'
    //implementation 'net.qiujuer.genius:res:2.0.0'
    implementation 'com.scwang.smartrefresh:SmartRefreshLayout:1.0.4-7'
    //implementation 'cn.bingoogolapple:bga-qrcode-zxing:1.2.1'
    implementation 'cn.bingoogolapple:bga-qrcode-zbar:1.2.1'
    // utils
    implementation 'com.blankj:utilcode:1.16.0'

    implementation 'com.github.bumptech.glide:glide:3.8.0'
    implementation 'pub.devrel:easypermissions:1.2.0'
}