import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.library'

android {

    signingConfigs {

        configs {
            keyAlias APP_KEY_ALIAS
            keyPassword APP_KEY_PASSWORD
            storePassword APP_STORE_PASSWORD

            def userName = System.getProperty("user.name")//根据 os 账户信息动态生成keystore 保存路径
            def keystore_path = Os.isFamily(Os.FAMILY_WINDOWS) ? WINDOWS_RELEASE_STORE_FILE : LINUX_RELEASE_STORE_FILE
            keystore_path = keystore_path.replace("{user_name}", userName)

            storeFile file(keystore_path)
        }
    }

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionName rootProject.ext.libVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            debuggable rootProject.ext.debuggable
            jniDebuggable rootProject.ext.jniDebuggable
            minifyEnabled rootProject.ext.minifyEnabled
            pseudoLocalesEnabled rootProject.ext.pseudoLocalesEnabled
            zipAlignEnabled rootProject.ext.zipAlignEnabled
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.configs
        }

        debug {
            debuggable rootProject.ext.debuggable
            jniDebuggable rootProject.ext.jniDebuggable
            minifyEnabled rootProject.ext.minifyEnabled
            pseudoLocalesEnabled rootProject.ext.pseudoLocalesEnabled
            zipAlignEnabled rootProject.ext.zipAlignEnabled
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.configs
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    productFlavors {
    }

    lintOptions {
        abortOnError rootProject.ext.abortOnError
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'

    //noinspection GradleCompatible
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

//def siteUrl = 'https://github.com/lzyzsd/JsBridge'
//def gitUrl = 'https://github.com/lzyzsd/JsBridge.git'
//apply plugin: 'com.github.dcendents.android-maven'
//group = "com.github.lzyzsd.jsbridge"
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}
//Properties properties = new Properties()
//properties.load(project.rootProject.file('local.properties').newDataInputStream())
