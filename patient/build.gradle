import org.apache.tools.ant.taskdefs.condition.Os

import java.text.SimpleDateFormat

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

// make sure this line comes *after* you apply the Android plugin
apply plugin: 'com.getkeepsafe.dexcount'

def appProperties = new Properties()
appProperties.load(new FileInputStream(getProject().file("app.properties")))

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            res.srcDirs(
                    'src/main/res',
                    'src/main/res_common',
                    'src/main/res_device',
                    'src/main/res_cbti',
                    'src/main/res_doctor_and_service',
                    'src/main/res_me_and_others',
                    'src/main/res_sleep_data_and_treatment',
            )
        }
    }

    signingConfigs {
        configs {
            keyAlias appProperties['APP_KEY_ALIAS']
            keyPassword appProperties['APP_KEY_PASSWORD']
            storePassword appProperties['APP_STORE_PASSWORD']

            def userName = System.getProperty("user.name")//根据 os 账户信息动态生成keystore 保存路径
            def keystore_path = Os.isFamily(Os.FAMILY_WINDOWS) ? appProperties['WINDOWS_RELEASE_STORE_FILE'] : appProperties['LINUX_RELEASE_STORE_FILE']
            keystore_path = keystore_path.replace("{user_name}", userName)
            storeFile file(keystore_path)
        }
    }

    defaultConfig {
        applicationId = "com.sumian.sd_clinic"
        applicationIdSuffix = null
        versionCode = new Date().format('yyyyMMddHH').toInteger()
        versionName = "1.0.0"
        versionNameSuffix = null

        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

        buildConfigField("String", "CHANNEL", "\"yyb\"")
        buildConfigField("String", "LEANCLOUD_ONLINE_SERVICE_ID", appProperties['LEANCLOUD_ONLINE_SERVICE_ID'])
        buildConfigField("String", "LEANCLOUD_DOCTOR_SERVICE_ID", appProperties['LEANCLOUD_DOCTOR_SERVICE_ID'])
        buildConfigField("String", "UMENG_APP_KEY", appProperties['OFFICIAL_UMENG_APP_KEY'])
        buildConfigField("String", "UMENG_PUSH_SECRET", appProperties['UMENG_PUSH_SECRET'])
        buildConfigField("String", "UMENG_CHANNEL", appProperties['UMENG_CHANNEL'])
        buildConfigField("String", "EASEMOB_APP_KEY", appProperties['EASEMOB_APP_KEY'])
        buildConfigField("String", "EASEMOB_TENANT_ID", appProperties['EASEMOB_TENANT_ID'])
        buildConfigField("String", "EASEMOB_CUSTOMER_SERVICE_ID", appProperties['EASEMOB_CUSTOMER_SERVICE_ID'])
        buildConfigField("String", "USER_AGREEMENT_URL", appProperties['USER_AGREEMENT_URL'])
        buildConfigField("String", "USER_PRIVACY_POLICY_URL", appProperties['USER_PRIVACY_POLICY_URL'])
        buildConfigField("boolean", "IS_CLINICAL_VERSION", "false")
        buildConfigField("String", "DEFAULT_APK_DOWNLOAD_URL", appProperties['DEFAULT_APK_DOWNLOAD_URL'])
        buildConfigField("String", "HTTP_DNS_ACCOUNT_ID", appProperties['HTTP_DNS_ACCOUNT_ID'])
        buildConfigField("String", "HTTP_DNS_SECRET_KEY", appProperties['HTTP_DNS_SECRET_KEY'])
        buildConfigField("String", "CBTI_SHARE_WEBSITE", appProperties['CBTI_SHARE_WEBSITE'])
        buildConfigField("String", "ALIYUN_LOG_ACCESS_KEY_ID", appProperties['ALIYUN_LOG_ACCESS_KEY_ID'])
        buildConfigField("String", "ALIYUN_LOG_ACCESS_SECRET", appProperties['ALIYUN_LOG_ACCESS_SECRET'])
        buildConfigField("String", "ALIYUN_LOG_LOG_STORE", appProperties['ALIYUN_LOG_LOG_STORE'])
        buildConfigField("String", "ALIYUN_LOG_END_POINT", appProperties['ALIYUN_LOG_END_POINT'])
        buildConfigField("String", "WECHAT_APP_ID", appProperties['WECHAT_APP_ID'])
        buildConfigField("String", "WECHAT_APP_SECRET", appProperties['WECHAT_APP_SECRET'])
        buildConfigField("String", "WECHAT_MINI_PROGRAM_ID_YOUZAN", appProperties['WECHAT_MINI_PROGRAM_ID_YOUZAN'])
        buildConfigField("String", "YOUZAN_URL", appProperties['YOUZAN_URL'])

        // Enabling multidex support.
        multiDexEnabled true
        ndk {
            //设置支持的SO库架构
            abiFilters 'armeabi-v7a'
        }
        // tencent statics
        manifestPlaceholders = [
                MTA_APPKEY : appProperties['TENCENT_STATIC_APP_ID_OFFICIAL'],
                MTA_CHANNEL: "yyb"
        ]
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }

    buildTypes {

        release {
            debuggable false
            jniDebuggable false
            signingConfig signingConfigs.configs
            useProguard true  //默认 false，如果开启了混淆， 但是我们可以不应用 proguard 文件
            shrinkResources false
            minifyEnabled false
            zipAlignEnabled true
            pseudoLocalesEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue("string", "umeng_app_key", appProperties['OFFICIAL_UMENG_APP_KEY'])
        }

        debug {
            debuggable true
            jniDebuggable true
            signingConfig signingConfigs.configs
            useProguard true  //默认 false，如果开启了混淆， 但是我们可以不应用 proguard 文件
            shrinkResources false
            minifyEnabled false
            zipAlignEnabled true
            pseudoLocalesEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            resValue("string", "umeng_app_key", appProperties['TEST_UMENG_APP_KEY'])
        }

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    lintOptions {
        abortOnError rootProject.ext.abortOnError
    }

    //product flavors
    flavorDimensions "market", "environment"
    productFlavors {

        def app_name = "eSleep"

        yyb {//应用宝
            dimension "market"
        }

        devolop {
            dimension "environment"
            def real_app_name = "${app_name}-Dev"
            versionNameSuffix = "-dev"

            buildConfigField("String", "BASE_URL", appProperties['BASE_DEV_URL'])
            buildConfigField("String", "BASE_H5_URL", appProperties['BASE_DEV_H5_URL'])
            buildConfigField("String", "LEANCLOUD_APP_ID", appProperties['DEV_LEANCLOUD_APP_ID'])
            buildConfigField("String", "LEANCLOUD_APP_KEY", appProperties['DEV_LEANCLOUD_APP_KEY'])
            buildConfigField("String", "LEANCLOUD_ONLINE_SERVICE_ID", appProperties['LEANCLOUD_ONLINE_SERVICE_ID'])
            buildConfigField("String", "LEANCLOUD_DOCTOR_SERVICE_ID", appProperties['LEANCLOUD_DOCTOR_SERVICE_ID'])
            buildConfigField("String", "LEANCLOUD_BROADCAST_CONVERSATION_ID", appProperties['DEV_LEANCLOUD_BROADCAST_CONVERSATION_ID'])
            buildConfigField("String", "ALIYUN_LOG_PROJECT", appProperties['ALIYUN_LOG_PROJECT_DEV'])
            buildConfigField("String", "TENCENT_STATIC_APP_ID", appProperties['TENCENT_STATIC_APP_ID_TEST'])

            resValue "string", "app_name", real_app_name
            println("${real_app_name}")
        }

        alpha {
            dimension "environment"
            def real_app_name = "${app_name}-Test"
            versionNameSuffix = "-test"

            buildConfigField("String", "BASE_URL", appProperties['BASE_TEST_URL'])
            buildConfigField("String", "BASE_H5_URL", appProperties['BASE_TEST_H5_URL'])
            buildConfigField("String", "LEANCLOUD_APP_ID", appProperties['TEST_LEANCLOUD_APP_ID'])
            buildConfigField("String", "LEANCLOUD_APP_KEY", appProperties['TEST_LEANCLOUD_APP_KEY'])
            buildConfigField("String", "LEANCLOUD_ONLINE_SERVICE_ID", appProperties['LEANCLOUD_ONLINE_SERVICE_ID'])
            buildConfigField("String", "LEANCLOUD_DOCTOR_SERVICE_ID", appProperties['LEANCLOUD_DOCTOR_SERVICE_ID'])
            buildConfigField("String", "LEANCLOUD_BROADCAST_CONVERSATION_ID", appProperties['TEST_LEANCLOUD_BROADCAST_CONVERSATION_ID'])
            buildConfigField("String", "ALIYUN_LOG_PROJECT", appProperties['ALIYUN_LOG_PROJECT_TEST'])
            buildConfigField("String", "TENCENT_STATIC_APP_ID", appProperties['TENCENT_STATIC_APP_ID_TEST'])

            resValue "string", "app_name", real_app_name
            println("${real_app_name}")
        }

        official {
            dimension "environment"
            versionNameSuffix = "-release"
            buildConfigField("String", "BASE_URL", appProperties['BASE_OFFICIAL_URL'])
            buildConfigField("String", "BASE_H5_URL", appProperties['BASE_OFFICIAL_H5_URL'])
            buildConfigField("String", "LEANCLOUD_APP_ID", appProperties['OFFICIAL_LEANCLOUD_APP_ID'])
            buildConfigField("String", "LEANCLOUD_APP_KEY", appProperties['OFFICIAL_LEANCLOUD_APP_KEY'])
            buildConfigField("String", "LEANCLOUD_ONLINE_SERVICE_ID", appProperties['LEANCLOUD_ONLINE_SERVICE_ID'])
            buildConfigField("String", "LEANCLOUD_DOCTOR_SERVICE_ID", appProperties['LEANCLOUD_DOCTOR_SERVICE_ID'])
            buildConfigField("String", "LEANCLOUD_BROADCAST_CONVERSATION_ID", appProperties['OFFICIAL_LEANCLOUD_BROADCAST_CONVERSATION_ID'])
            buildConfigField("String", "ALIYUN_LOG_PROJECT", appProperties['ALIYUN_LOG_PROJECT_OFFICIAL'])
            buildConfigField("String", "TENCENT_STATIC_APP_ID", appProperties['TENCENT_STATIC_APP_ID_OFFICIAL'])

            resValue "string", "app_name", app_name
            println("${app_name}")
        }

        productFlavors.all { flavor ->
            flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name, scheme: "${appProperties['SCHEME']}", host: "${appProperties['HOST']}"]
        }

    }

    // If you use each() to iterate through the variant objects,
    // you need to start using all(). That's because each() iterates
    // through only the objects that already exist during configuration time—
    // but those object don't exist at configuration time with the new model.
    // However, all() adapts to the new model by picking up object as they are
    // added during execution.

    // rename the apk with the version name
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            //输出 apk 文件名

            def fileName = "速眠医生_患者版_${variant.flavorName}_${buildType.name}_${formatDate()}.apk"

            println fileName

            //新方式
            outputFileName = fileName

            //该方式已被废除
            //output.outputFile = new File(output.outputFile.parent, fileName)
        }
    }

    //启动 as 自带的 kotlin parcelize 序列化功能
    androidExtensions {
        experimental = true
    }

    // useLibrary 'org.apache.http.legacy'
}

static def formatDate() {
    def sdf = new SimpleDateFormat("yyyy_MM_dd_HH_mm")
    def formatDate = sdf.format(new Date())
    return formatDate
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.1.1'
    //kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    //aliyun oss
    implementation 'com.aliyun.dpa:oss-android-sdk:2.9.1'
    //aliyun player sdk
    implementation(name: 'AlivcReporter-1.2', ext: 'aar')
    implementation(name: 'AlivcPlayer-3.4.8', ext: 'aar')
    implementation(name: 'AliyunVodPlayer-3.4.8', ext: 'aar')
    //ping++
    implementation 'com.pingxx:pingpp-core:2.1.18'
    // 使用支付宝时添加
    implementation 'com.pingxx:pingpp-alipay:2.1.18'
    //拼音分词
    //implementation 'com.belerweb:pinyin4j:2.5.1'
    //scan qr code
    implementation 'cn.bingoogolapple:bga-qrcode-zbar:1.3.4'
    // RecyclerViewPager
    implementation 'com.github.lsjwzh.RecyclerViewPager:lib:v1.1.2@aar'
    implementation project(':common')
    // round corner image view
    implementation 'com.makeramen:roundedimageview:2.3.0'
    // LeakCanary
    //debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.3'
    //debugImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.3'
    // Optional, if you use support library fragments:
    //debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.3'
//    implementation project(':module_core')
    implementation project(':SumianDevice')
    // file download
    implementation 'com.liulishuo.filedownloader:library:1.7.6'
}
