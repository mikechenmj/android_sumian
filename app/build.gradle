import org.apache.tools.ant.taskdefs.condition.Os

import java.text.SimpleDateFormat

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

android {

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    signingConfigs {

        configs {
            keyAlias APP_KEY_ALIAS
            keyPassword APP_KEY_PASSWORD
            storePassword APP_STORE_PASSWORD

            def userName = System.getProperty("user.name")//根据 os 账户信息动态生成keystore 保存路径
            def keystore_path = Os.isFamily(Os.FAMILY_WINDOWS) ? WINDOWS_RELEASE_STORE_FILE : LINUX_RELEASE_STORE_FILE
            keystore_path = keystore_path.replace("{user_name}", userName)

            //加载资源
            //Properties properties = new Properties()
            //InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream()
            //properties.load( inputStream )

            //读取文件
            //def keystore_file = properties.getProperty('RELEASE_STORE_FILE')

            storeFile file(keystore_path)
        }

    }

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

        buildConfigField("String", "LEANCLOUD_ONLINE_SERVICE_ID", LEANCLOUD_ONLINE_SERVICE_ID)
        buildConfigField("String", "LEANCLOUD_DOCTOR_SERVICE_ID", LEANCLOUD_DOCTOR_SERVICE_ID)

        // Enabling multidex support.
        multiDexEnabled true

        ndk {
            //设置支持的SO库架构
            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
    }

    testOptions {
        execution 'ANDROID_TEST_ORCHESTRATOR'
    }

    buildTypes {

        release {
            debuggable false
            jniDebuggable false
            signingConfig signingConfigs.configs
            minifyEnabled rootProject.ext.minifyEnabled
            pseudoLocalesEnabled rootProject.ext.pseudoLocalesEnabled
            zipAlignEnabled rootProject.ext.zipAlignEnabled
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationIdSuffix rootProject.ext.applicationIdSuffix
            versionNameSuffix rootProject.ext.versionNameSuffix
            resValue("string", "umeng_app_key", OFFICIAL_UMENG_APP_KEY)
            buildConfigField("String", "WECHAT_APP_ID", OFFICIAL_WECHAT_APP_ID)
            buildConfigField("String", "WECHAT_APP_SECRET", OFFICIAL_WECHAT_APP_SECRET)
        }

        debug {
            debuggable true
            jniDebuggable true
            signingConfig signingConfigs.configs
            minifyEnabled rootProject.ext.minifyEnabled
            pseudoLocalesEnabled rootProject.ext.pseudoLocalesEnabled
            zipAlignEnabled rootProject.ext.zipAlignEnabled
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationIdSuffix rootProject.ext.applicationIdSuffix
            versionNameSuffix rootProject.ext.versionNameSuffix

            resValue("string", "umeng_app_key", TEST_UMENG_APP_KEY)
            buildConfigField("String", "WECHAT_APP_ID", OFFICIAL_WECHAT_APP_ID)
            buildConfigField("String", "WECHAT_APP_SECRET", OFFICIAL_WECHAT_APP_SECRET)
        }

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    lintOptions {
        abortOnError rootProject.ext.abortOnError
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    //product flavors
    flavorDimensions "market", "environment"
    productFlavors {

        def app_name = "睡眠医生"
        def application_id = rootProject.ext.applicationId
        def version_name = rootProject.ext.versionName

        yingyongbao {
            dimension "market"
        }

        devolop {
            dimension "environment"

            def real_app_name = "${app_name}-Dev"

            applicationId = application_id
            applicationIdSuffix = null
            versionName = version_name
            versionNameSuffix = "-dev"

            buildConfigField("boolean", "IS_CLINICAL_VERSION", "false")

            buildConfigField("String", "BASE_URL", BASE_DEV_URL)

            buildConfigField("String", "BASE_H5_URL", BASE_DEV_H5_URL)

            buildConfigField("String", "LEANCLOUD_APP_ID", DEV_LEANCLOUD_APP_ID)
            buildConfigField("String", "LEANCLOUD_APP_KEY", DEV_LEANCLOUD_APP_KEY)
            buildConfigField("String", "LEANCLOUD_ONLINE_SERVICE_ID", LEANCLOUD_ONLINE_SERVICE_ID)
            buildConfigField("String", "LEANCLOUD_DOCTOR_SERVICE_ID", LEANCLOUD_DOCTOR_SERVICE_ID)
            buildConfigField("String", "LEANCLOUD_BROADCAST_CONVERSATION_ID", DEV_LEANCLOUD_BROADCAST_CONVERSATION_ID)

            buildConfigField("String", "DEFAULT_APK_DOWNLOAD_URL", DEFAULT_APK_DOWNLOAD_URL)
            buildConfigField("String", "ABOUT_ME_URL", DEV_ABOUT_ME_URL)
            buildConfigField("String", "USER_AGREEMENT_URL", DEV_USER_AGREEMENT_URL)
            buildConfigField("String", "USER_POLICY_URL", DEV_USER_PRIVACY_URL)

            resValue "string", "app_name", real_app_name
            println("${real_app_name}")
        }

        alpha {
            dimension "environment"

            def real_app_name = "${app_name}-Test"

            applicationId = application_id
            applicationIdSuffix = null
            versionName = version_name
            versionNameSuffix = "-test"


            buildConfigField("String", "BASE_URL", BASE_TEST_URL)

            buildConfigField("String", "BASE_H5_URL", BASE_TEST_H5_URL)

            buildConfigField("String", "LEANCLOUD_APP_ID", TEST_LEANCLOUD_APP_ID)
            buildConfigField("String", "LEANCLOUD_APP_KEY", TEST_LEANCLOUD_APP_KEY)
            buildConfigField("String", "LEANCLOUD_ONLINE_SERVICE_ID", LEANCLOUD_ONLINE_SERVICE_ID)
            buildConfigField("String", "LEANCLOUD_DOCTOR_SERVICE_ID", LEANCLOUD_DOCTOR_SERVICE_ID)
            buildConfigField("String", "LEANCLOUD_BROADCAST_CONVERSATION_ID", TEST_LEANCLOUD_BROADCAST_CONVERSATION_ID)

            buildConfigField("String", "DEFAULT_APK_DOWNLOAD_URL", DEFAULT_APK_DOWNLOAD_URL)
            buildConfigField("String", "ABOUT_ME_URL", TEST_ABOUT_ME_URL)
            buildConfigField("String", "USER_AGREEMENT_URL", TEST_USER_AGREEMENT_URL)
            buildConfigField("String", "USER_POLICY_URL", TEST_USER_PRIVACY_URL)

            resValue "string", "app_name", real_app_name
            println("${real_app_name}")
        }

        official {
            dimension "environment"

            applicationId = application_id
            applicationIdSuffix = null
            versionName = version_name
            versionNameSuffix = "-release"

            buildConfigField("String", "BASE_URL", BASE_OFFICIAL_URL)

            buildConfigField("String", "BASE_H5_URL", BASE_OFFICIAL_H5_URL)

            buildConfigField("String", "LEANCLOUD_APP_ID", OFFICIAL_LEANCLOUD_APP_ID)
            buildConfigField("String", "LEANCLOUD_APP_KEY", OFFICIAL_LEANCLOUD_APP_KEY)
            buildConfigField("String", "LEANCLOUD_ONLINE_SERVICE_ID", LEANCLOUD_ONLINE_SERVICE_ID)
            buildConfigField("String", "LEANCLOUD_DOCTOR_SERVICE_ID", LEANCLOUD_DOCTOR_SERVICE_ID)
            buildConfigField("String", "LEANCLOUD_BROADCAST_CONVERSATION_ID", OFFICIAL_LEANCLOUD_BROADCAST_CONVERSATION_ID)

            buildConfigField("String", "DEFAULT_APK_DOWNLOAD_URL", DEFAULT_APK_DOWNLOAD_URL)
            buildConfigField("String", "ABOUT_ME_URL", OFFICIAL_ABOUT_ME_URL)
            buildConfigField("String", "USER_AGREEMENT_URL", OFFICIAL_USER_AGREEMENT_URL)
            buildConfigField("String", "USER_POLICY_URL", OFFICIAL_USER_PRIVACY_URL)

            resValue "string", "app_name", app_name
            println("${app_name}")
        }

        productFlavors.all { flavor ->
            flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name, scheme: "${SCHEME}", host: "${HOST}"]
        }

    }

    // If you use each() to iterate through the variant objects,
    // you need to start using all(). That's because each() iterates
    // through only the objects that already exist during configuration time—
    // but those object don't exist at configuration time with the new model.
    // However, all() adapts to the new model by picking up object as they are
    // added during execution.

    // rename the apk with the version name
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            //输出 apk 文件名

            def fileName = "Sleep Doctor_${variant.flavorName}_${formatDate()}.apk"

            println fileName

            //新方式
            outputFileName = fileName

            //该方式已被废除
            //output.outputFile = new File(output.outputFile.parent, fileName)
        }
    }

    //启动 as 自带的 kotlin parcelize 序列化功能
    androidExtensions {
        experimental = true
    }
}

static def formatDate() {
    def sdf = new SimpleDateFormat("yyyyMMddHHmmss")
    def formatDate = sdf.format(new Date())
    return formatDate
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation('com.android.support.test.espresso:espresso-core:3.0.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation project(':common')
    implementation project(':open')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:' + rootProject.ext.supportVersion
    implementation 'com.android.support:support-v4:' + rootProject.ext.supportVersion
    implementation 'com.android.support:design:' + rootProject.ext.supportVersion
    implementation 'com.android.support:cardview-v7:' + rootProject.ext.supportVersion
    implementation 'com.android.support:support-vector-drawable:' + rootProject.ext.supportVersion
    implementation 'com.android.support:palette-v7:' + rootProject.ext.supportVersion
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.10.0'
    implementation 'com.github.bumptech.glide:okhttp3-integration:4.3.1'

    // implementation 'org.ligboy.retrofit2:converter-fastjson-android:2.1.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.google.code.gson:gson:2.8.4'
    implementation 'pub.devrel:easypermissions:1.2.0'
    implementation 'de.hdodenhof:circleimageview:2.1.0'

    //implementation 'com.sunfusheng:glideimageview:1.2.0'
    implementation 'com.github.bumptech.glide:glide:4.7.1'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.7.1'
    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    implementation 'com.qmuiteam:qmui:1.1.0'
    implementation 'com.qmuiteam:arch:0.0.1'
    implementation 'net.qiujuer.genius:ui:2.0.0'
    implementation 'net.qiujuer.genius:res:2.0.0'

    //status bar util
    implementation 'com.jaeger.statusbarutil:library:1.4.0'

    //fastjson

    //implementation 'com.alibaba:fastjson:1.2.47'

    // ViewModel and LiveData
    implementation 'android.arch.lifecycle:extensions:1.1.1'
    annotationProcessor 'android.arch.lifecycle:compiler:1.1.1'

    // Java8 support for Lifecycles
    implementation 'android.arch.lifecycle:common-java8:1.1.1'

    // LeanCloud 基础包
    implementation 'cn.leancloud.android:avoscloud-sdk:v4.6.7'

    // 推送与实时聊天需要的包
    implementation('cn.leancloud.android:avoscloud-push:v4.6.7@aar') { transitive = true }

    //support emoji
    implementation 'com.android.support:support-emoji-appcompat:' + rootProject.ext.supportVersion
    implementation 'com.android.support:support-emoji-bundled:' + rootProject.ext.supportVersion

    //aliyun oss
    implementation 'com.aliyun.dpa:oss-android-sdk:2.8.0'

    //ping++
    implementation 'com.pingxx:pingpp-core:2.1.17'

    // 使用微信支付时添加,具体版本参考微信官方文档

    //provided 'com.tencent.mm.opensdk:wechat-sdk-android-without-mta:5.1.4'

    // 使用支付宝时添加
    implementation 'com.pingxx:pingpp-alipay:2.1.17'

    //拼音分词
    implementation 'com.belerweb:pinyin4j:2.5.0'

    //scan qr code
    implementation 'cn.bingoogolapple:bga-qrcode-zbar:1.2.1'

    // utils
    implementation 'com.blankj:utilcode:1.16.0'

    // RecyclerViewPager
    implementation 'com.github.lsjwzh.RecyclerViewPager:lib:v1.1.2@aar'

    //jsBridge

    //implementation 'com.github.wendux:DSBridge-Android:x5-3.0-SNAPSHOT'
    implementation 'com.github.lzyzsd:jsbridge:1.0.4'
    implementation('com.github.lzyzsd:jsbridge:1.0.4') {
        exclude module: 'support-annotations'
    }
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.40'
    implementation('com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.40') {
        exclude module: 'support-recyclerview'
    }
}
