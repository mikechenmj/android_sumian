import org.apache.tools.ant.taskdefs.condition.Os

import java.text.SimpleDateFormat

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    signingConfigs {
        configs {
            keyAlias APP_KEY_ALIAS
            keyPassword APP_KEY_PASSWORD
            storePassword APP_STORE_PASSWORD

            def userName = System.getProperty("user.name")//根据 os 账户信息动态生成keystore 保存路径
            def keystore_path = Os.isFamily(Os.FAMILY_WINDOWS) ? WINDOWS_RELEASE_STORE_FILE : LINUX_RELEASE_STORE_FILE
            keystore_path = keystore_path.replace("{user_name}", userName)

            //加载资源
            //Properties properties = new Properties()
            //InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream()
            //properties.load( inputStream )

            //读取文件
            //def keystore_file = properties.getProperty('RELEASE_STORE_FILE')

            storeFile file(keystore_path)
        }
    }

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

        buildConfigField("String", "LEANCLOUD_ONLINE_SERVICE_ID", LEANCLOUD_ONLINE_SERVICE_ID)
        buildConfigField("String", "LEANCLOUD_DOCTOR_SERVICE_ID", LEANCLOUD_DOCTOR_SERVICE_ID)
        buildConfigField("String", "UMENG_APP_KEY", OFFICIAL_UMENG_APP_KEY)
        buildConfigField("String", "UMENG_PUSH_SECRET", UMENG_PUSH_SECRET)
        buildConfigField("String", "UMENG_CHANNEL", UMENG_CHANNEL)
        buildConfigField("String", "EASEMOB_APP_KEY", HW_EASEMOB_APP_KEY)
        buildConfigField("String", "EASEMOB_TENANT_ID", HW_EASEMOB_TENANT_ID)
        buildConfigField("String", "EASEMOB_CUSTOMER_SERVICE_ID", HW_EASEMOB_CUSTOMER_SERVICE_ID)
        buildConfigField("String", "USER_AGREEMENT_URL", USER_AGREEMENT_URL)
        buildConfigField("String", "USER_PRIVACY_POLICY_URL", USER_PRIVACY_POLICY_URL)
        buildConfigField("String", "HW_USER_GUIDELINE_URL", HW_USER_GUIDELINE_URL)
        buildConfigField("boolean", "IS_CLINICAL_VERSION", "false")
        buildConfigField("String", "DEFAULT_APK_DOWNLOAD_URL", DEFAULT_APK_DOWNLOAD_URL)
        buildConfigField("String", "HTTP_DNS_ACCOUNT_ID", HTTP_DNS_ACCOUNT_ID)
        buildConfigField("String", "HTTP_DNS_SECRET_KEY", HTTP_DNS_SECRET_KEY)

        // Enabling multidex support.
        multiDexEnabled true

        ndk {
            //设置支持的SO库架构
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }

        resConfigs "zh"//,"en"
    }

    testOptions {
        execution 'ANDROID_TEST_ORCHESTRATOR'
    }

    buildTypes {

        release {
            debuggable false
            jniDebuggable false
            signingConfig signingConfigs.configs
            useProguard true  //默认 false，如果开启了混淆， 但是我们可以不应用 proguard 文件
            shrinkResources true
            minifyEnabled true
            zipAlignEnabled true
            pseudoLocalesEnabled rootProject.ext.pseudoLocalesEnabled
            zipAlignEnabled rootProject.ext.zipAlignEnabled
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationIdSuffix rootProject.ext.applicationIdSuffix
            versionNameSuffix rootProject.ext.versionNameSuffix
            resValue("string", "umeng_app_key", OFFICIAL_UMENG_APP_KEY)
            buildConfigField("String", "WECHAT_APP_ID", OFFICIAL_WECHAT_APP_ID)
            buildConfigField("String", "WECHAT_APP_SECRET", OFFICIAL_WECHAT_APP_SECRET)
        }

        debug {
            debuggable true
            jniDebuggable true
            signingConfig signingConfigs.configs
            useProguard true  //默认 false，如果开启了混淆， 但是我们可以不应用 proguard 文件
            shrinkResources false
            minifyEnabled false
            zipAlignEnabled true
            pseudoLocalesEnabled rootProject.ext.pseudoLocalesEnabled
            zipAlignEnabled rootProject.ext.zipAlignEnabled
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationIdSuffix rootProject.ext.applicationIdSuffix
            versionNameSuffix rootProject.ext.versionNameSuffix

            resValue("string", "umeng_app_key", TEST_UMENG_APP_KEY)
            buildConfigField("String", "WECHAT_APP_ID", OFFICIAL_WECHAT_APP_ID)
            buildConfigField("String", "WECHAT_APP_SECRET", OFFICIAL_WECHAT_APP_SECRET)
        }

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    lintOptions {
        abortOnError rootProject.ext.abortOnError
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    //product flavors
    flavorDimensions "market", "environment"
    productFlavors {

        def app_name = "速眠医生"
        def application_id = rootProject.ext.applicationId
        def version_name = rootProject.ext.versionName

        yyb {//应用宝
            dimension "market"
        }

        devolop {
            dimension "environment"

            def real_app_name = "${app_name}-Dev"

            applicationId = application_id
            applicationIdSuffix = null
            versionName = version_name
            versionNameSuffix = "-dev"

            buildConfigField("String", "BASE_URL", BASE_DEV_URL)
            buildConfigField("String", "BASE_H5_URL", BASE_DEV_H5_URL)
            buildConfigField("String", "LEANCLOUD_APP_ID", DEV_LEANCLOUD_APP_ID)
            buildConfigField("String", "LEANCLOUD_APP_KEY", DEV_LEANCLOUD_APP_KEY)
            buildConfigField("String", "LEANCLOUD_ONLINE_SERVICE_ID", LEANCLOUD_ONLINE_SERVICE_ID)
            buildConfigField("String", "LEANCLOUD_DOCTOR_SERVICE_ID", LEANCLOUD_DOCTOR_SERVICE_ID)
            buildConfigField("String", "LEANCLOUD_BROADCAST_CONVERSATION_ID", DEV_LEANCLOUD_BROADCAST_CONVERSATION_ID)
            buildConfigField("String", "HW_BASE_URL", HW_DEV_URL)
            buildConfigField("String", "HW_QUESTION_URL", HW_DEV_QUESTION_URL)

            resValue "string", "app_name", real_app_name
            println("${real_app_name}")
        }

        alpha {
            dimension "environment"

            def real_app_name = "${app_name}-Test"

            applicationId = application_id
            applicationIdSuffix = null
            versionName = version_name
            versionNameSuffix = "-test"

            buildConfigField("String", "BASE_URL", BASE_TEST_URL)
            buildConfigField("String", "BASE_H5_URL", BASE_TEST_H5_URL)
            buildConfigField("String", "LEANCLOUD_APP_ID", TEST_LEANCLOUD_APP_ID)
            buildConfigField("String", "LEANCLOUD_APP_KEY", TEST_LEANCLOUD_APP_KEY)
            buildConfigField("String", "LEANCLOUD_ONLINE_SERVICE_ID", LEANCLOUD_ONLINE_SERVICE_ID)
            buildConfigField("String", "LEANCLOUD_DOCTOR_SERVICE_ID", LEANCLOUD_DOCTOR_SERVICE_ID)
            buildConfigField("String", "LEANCLOUD_BROADCAST_CONVERSATION_ID", TEST_LEANCLOUD_BROADCAST_CONVERSATION_ID)
            buildConfigField("String", "HW_BASE_URL", HW_TEST_URL)
            buildConfigField("String", "HW_QUESTION_URL", HW_TEST_QUESTION_URL)

            resValue "string", "app_name", real_app_name
            println("${real_app_name}")
        }

        official {
            dimension "environment"

            applicationId = application_id
            applicationIdSuffix = null
            versionName = version_name
            versionNameSuffix = "-release"

            buildConfigField("String", "BASE_URL", BASE_OFFICIAL_URL)
            buildConfigField("String", "BASE_H5_URL", BASE_OFFICIAL_H5_URL)
            buildConfigField("String", "LEANCLOUD_APP_ID", OFFICIAL_LEANCLOUD_APP_ID)
            buildConfigField("String", "LEANCLOUD_APP_KEY", OFFICIAL_LEANCLOUD_APP_KEY)
            buildConfigField("String", "LEANCLOUD_ONLINE_SERVICE_ID", LEANCLOUD_ONLINE_SERVICE_ID)
            buildConfigField("String", "LEANCLOUD_DOCTOR_SERVICE_ID", LEANCLOUD_DOCTOR_SERVICE_ID)
            buildConfigField("String", "LEANCLOUD_BROADCAST_CONVERSATION_ID", OFFICIAL_LEANCLOUD_BROADCAST_CONVERSATION_ID)
            buildConfigField("String", "HW_BASE_URL", HW_OFFICIAL_URL)
            buildConfigField("String", "HW_QUESTION_URL", HW_OFFICIAL_QUESTION_URL)

            resValue "string", "app_name", app_name
            println("${app_name}")
        }

        productFlavors.all { flavor ->
            flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name, scheme: "${SCHEME}", host: "${HOST}"]
        }

    }

    // If you use each() to iterate through the variant objects,
    // you need to start using all(). That's because each() iterates
    // through only the objects that already exist during configuration time—
    // but those object don't exist at configuration time with the new model.
    // However, all() adapts to the new model by picking up object as they are
    // added during execution.

    // rename the apk with the version name
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            //输出 apk 文件名

            def fileName = "速眠医生_患者版_${variant.flavorName}_${formatDate()}.apk"

            println fileName

            //新方式
            outputFileName = fileName

            //该方式已被废除
            //output.outputFile = new File(output.outputFile.parent, fileName)
        }
    }

    //启动 as 自带的 kotlin parcelize 序列化功能
    androidExtensions {
        experimental = true
    }

    // useLibrary 'org.apache.http.legacy'
}

static def formatDate() {
    def sdf = new SimpleDateFormat("yyyy_MM_dd_HH_mm")
    def formatDate = sdf.format(new Date())
    return formatDate
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation('com.android.support.test.espresso:espresso-core:3.0.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    implementation 'com.android.support:appcompat-v7:' + rootProject.ext.supportVersion
    implementation 'com.android.support:support-v4:' + rootProject.ext.supportVersion
    implementation 'com.android.support:design:' + rootProject.ext.supportVersion
    implementation 'com.android.support:cardview-v7:' + rootProject.ext.supportVersion
    implementation 'com.android.support:support-vector-drawable:' + rootProject.ext.supportVersion
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'

    implementation 'pub.devrel:easypermissions:1.2.0'

    implementation 'de.hdodenhof:circleimageview:2.2.0'

    implementation 'com.jakewharton:butterknife:8.8.1'
    kapt 'com.jakewharton:butterknife-compiler:8.8.1'

    implementation 'com.qmuiteam:qmui:1.1.3'
    implementation 'com.qmuiteam:arch:0.0.1'

    // ViewModel and LiveData
    implementation 'android.arch.lifecycle:extensions:1.1.1'
    kapt 'android.arch.lifecycle:compiler:1.1.1'
    implementation 'android.arch.lifecycle:viewmodel:1.1.1'
    // Java8 support for Lifecycles
    implementation 'android.arch.lifecycle:common-java8:1.1.1'

    // LeanCloud 基础包
    implementation 'cn.leancloud.android:avoscloud-sdk:v4.7.6'
    // 推送与实时聊天需要的包
    implementation('cn.leancloud.android:avoscloud-push:v4.7.6@aar') { transitive = true }

    //aliyun oss
    implementation 'com.aliyun.dpa:oss-android-sdk:2.9.1'
    //aliyun player sdk
    implementation(name: 'AlivcReporter-1.2', ext: 'aar')
    implementation(name: 'AlivcPlayer-3.4.6', ext: 'aar')
    implementation(name: 'AliyunVodPlayer-3.4.6', ext: 'aar')

    //ping++
    implementation 'com.pingxx:pingpp-core:2.1.18'
    // 使用支付宝时添加
    implementation 'com.pingxx:pingpp-alipay:2.1.18'

    //拼音分词
    implementation 'com.belerweb:pinyin4j:2.5.1'

    //scan qr code
    implementation 'cn.bingoogolapple:bga-qrcode-zbar:1.2.3'
    //implementation 'cn.bingoogolapple:bga-qrcode-zxing:1.2.3'

    // utils
    implementation 'com.blankj:utilcode:1.19.0'

    // RecyclerViewPager
    implementation 'com.github.lsjwzh.RecyclerViewPager:lib:v1.1.2@aar'
    implementation 'cn.carbswang.android:NumberPickerView:1.1.1'

    //implementation 'com.github.wendux:DSBridge-Android:x5-3.0-SNAPSHOT'

    // Base Adapter
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.40'
    implementation('com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.40') {
        exclude module: 'support-recyclerview'
    }

    // EventBus
    implementation 'org.greenrobot:eventbus:3.1.1'

    //hw
    implementation 'no.nordicsemi.android:dfu:1.7.0'

    //sumian component
//    implementation 'com.sumian.sd:common:1.0.21'
//    implementation 'com.sumian.sd:blue:1.0.2'
//    implementation 'com.sumian.sd:kefu-easeui:1.0.3'
//    implementation 'com.sumian.sd:jsbridge:1.0.0'
    implementation project(':blue')
    implementation project(':common')
    //implementation project(':jsbridge')
    implementation project(':kefu-easeui')
}
